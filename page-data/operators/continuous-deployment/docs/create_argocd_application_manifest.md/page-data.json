{"componentChunkName":"component---src-templates-markdown-js","path":"/operators/continuous-deployment/docs/create_argocd_application_manifest.md","result":{"data":{"site":{"siteMetadata":{"title":"Operate First"}},"markdownRemark":{"id":"a02c7c4b-bd28-52be-b387-60f8f7dbb229","html":"<h1 id=\"application-management\" style=\"position:relative;\"><a href=\"#application-management\" aria-label=\"application management permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Application Management</h1>\n<p>While ArgoCD allows you to create ArgoCD applications via the UI and CLI, we recommend that all applications be\ncreated <a href=\"https://argoproj.github.io/argo-cd/operator-manual/declarative-setup/#applications\">declaratively</a>.</p>\n<p>This allows you to easily restore your applications should the need arise.</p>\n<h2 id=\"pre-requisites\" style=\"position:relative;\"><a href=\"#pre-requisites\" aria-label=\"pre requisites permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pre-requisites</h2>\n<ul class=\"pf-c-list\">\n<li>Kustomize version 3.8+</li>\n</ul>\n<h2 id=\"steps-for-creating-an-application\" style=\"position:relative;\"><a href=\"#steps-for-creating-an-application\" aria-label=\"steps for creating an application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Steps for creating an application</h2>\n<p>For your application to show up to ArgoCD you need to do 2 things:</p>\n<ol class=\"pf-c-list\">\n<li>Create the Application yaml in the appropriate path in a fork</li>\n<li>Submit a PR to the base repository</li>\n</ol>\n<p>These steps are outlined in detail below:</p>\n<h3 id=\"step-1-create-the-application-yaml\" style=\"position:relative;\"><a href=\"#step-1-create-the-application-yaml\" aria-label=\"step 1 create the application yaml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1. Create the Application Yaml</h3>\n<p>Clone the repo and <code class=\"language-text\">cd</code> into where applications are stored:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">target_env</span><span class=\"token operator\">=</span>dev\n$ <span class=\"token builtin class-name\">cd</span> /manifests/overlays/<span class=\"token variable\">$target_env</span>/applications</code></pre></div>\n<p>If your team folder does not exist, create it:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> example_team <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> example_team\n$ kustomize create</code></pre></div>\n<p>Let’s create a sample application called <code class=\"language-text\">example-app</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># /manifests/overlays/dev/applications/example_team/example_app.yaml</span>\n\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> argoproj.io/v1alpha1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Application\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> example_app\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">destination</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> example_namespace\n    <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//example_server\n  <span class=\"token key atrule\">project</span><span class=\"token punctuation\">:</span> example_project\n  <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> path/to/kustomization\n    <span class=\"token key atrule\">repoURL</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//path<span class=\"token punctuation\">-</span>to<span class=\"token punctuation\">-</span>example<span class=\"token punctuation\">-</span>repo\n    <span class=\"token key atrule\">targetRevision</span><span class=\"token punctuation\">:</span> HEAD\n  <span class=\"token key atrule\">syncPolicy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">automated</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">prune</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n      <span class=\"token key atrule\">selfHeal</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">syncOptions</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> Validate=false</code></pre></div>\n<p>This is a basic minimal example application. For additional fields see <a href=\"https://argoproj.github.io/argo-cd/operator-manual/application.yaml\">here</a>.</p>\n<p>Let’s go over what some of the fields in the <code class=\"language-text\">example_app.yaml</code> refer to:</p>\n<ul class=\"pf-c-list\">\n<li><code class=\"language-text\">metadata.name</code>: the name of the <code class=\"language-text\">Application</code> resource as well as the name as it appears on the ui.</li>\n<li><code class=\"language-text\">spec.project</code>: the ArgoCD <code class=\"language-text\">Project</code> to which this <code class=\"language-text\">Application</code> belongs, ensure that this <code class=\"language-text\">Project</code> exists in <code class=\"language-text\">manifests/overlays/&lt;target_env&gt;/projects</code>.</li>\n<li><code class=\"language-text\">spec.destination.namespace</code>: the target namespace for this <code class=\"language-text\">Application</code>’s deployment, ensure that this namespace exists in <code class=\"language-text\">manifests/overlays/&lt;target_env&gt;/secrets/clusters</code> for the appropriate cluster/server.</li>\n<li><code class=\"language-text\">spec.destination.cluster</code>: the target cluster server name for this <code class=\"language-text\">Application</code>’s deployment, ensure this server exists in  <code class=\"language-text\">manifests/overlays/&lt;target_env&gt;/secrets/clusters</code> for the appropriate cluster.</li>\n<li><code class=\"language-text\">spec.source.path</code>: path to the Kustomization.yaml file relative to the repo’s root.</li>\n<li><code class=\"language-text\">spec.source.repoURL</code>: the repository holding the <code class=\"language-text\">Application</code>’s desired state, ensure this repo exists within <code class=\"language-text\">argo_cm</code> located in <code class=\"language-text\">manifests/overlays/&lt;target_env&gt;/configs/argo_cm/repositories</code>.</li>\n</ul>\n<blockquote>\n<p>NOTE: You may need to disable schema validation if your deployments are failing. This is due to the ArgoCD api validator having a very strict api spec.</p>\n</blockquote>\n<p>Once you are done add the application yaml to the Kustomization file by running the following <em>from the repository root directory</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ target_env=dev\n$ cd /manifests/overlays/$target_env/applications/example_team\n$ kustomize edit add resource example_app.yaml</code></pre></div>\n<h3 id=\"step-2-make-a-pull-request\" style=\"position:relative;\"><a href=\"#step-2-make-a-pull-request\" aria-label=\"step 2 make a pull request permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2. Make a Pull request</h3>\n<p>Commit your changes and submit a pr to your continuous deployment repository.</p>\n<h4 id=\"if-your-application-exists-in-argocd-but-not-on-vcs\" style=\"position:relative;\"><a href=\"#if-your-application-exists-in-argocd-but-not-on-vcs\" aria-label=\"if your application exists in argocd but not on vcs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>If your application exists in ArgoCD but not on VCS</h4>\n<p>Getting the manifests for all your applications is easy to do with the argocd cli.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Login via cli using sso</span>\n$ argocd --insecure --grpc-web login <span class=\"token variable\">${ARGOCD_ROUTE}</span>:443 --sso\n\n<span class=\"token comment\"># Get the application resource details</span>\n$ argocd app get <span class=\"token variable\">${APP_NAME}</span> -o yaml</code></pre></div>","fields":{"srcLink":"https://github.com/operate-first/continuous-deployment/blob/master/docs/create_argocd_application_manifest.md"},"frontmatter":{"title":"","description":null}}},"pageContext":{"id":"a02c7c4b-bd28-52be-b387-60f8f7dbb229"}},"staticQueryHashes":["117426894","3000541721"]}