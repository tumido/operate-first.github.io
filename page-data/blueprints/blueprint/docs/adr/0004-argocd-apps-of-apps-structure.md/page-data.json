{"componentChunkName":"component---src-templates-markdown-js","path":"/blueprints/blueprint/docs/adr/0004-argocd-apps-of-apps-structure.md","result":{"data":{"site":{"siteMetadata":{"title":"Operate First"}},"markdownRemark":{"id":"b0f80b03-0839-527a-8f55-8d0b014d7ad8","html":"<h1 id=\"argocd-apps-of-apps-structure\" style=\"position:relative;\"><a href=\"#argocd-apps-of-apps-structure\" aria-label=\"argocd apps of apps structure permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ArgoCD Apps of Apps Structure</h1>\n<h2 id=\"context-and-problem-statement\" style=\"position:relative;\"><a href=\"#context-and-problem-statement\" aria-label=\"context and problem statement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Context and Problem Statement</h2>\n<p>ArgoCD <code class=\"language-text\">Applications</code> manifests are a <a href=\"https://argoproj.github.io/argo-cd/operator-manual/declarative-setup/#applications\">declarative way to manage</a> ArgoCD <code class=\"language-text\">Applications</code> in git. Often times these are manifests that are stored alongside ArgoCD deployment manifests.</p>\n<p>This has been fine in the past since we controlled the deployment of ArgoCD and had merge access to the repo where the applications were stored. So if we wanted to onboard a new app, we make a PR with the application manifest and someone on our team would merge it.</p>\n<p>But there can be a situation where another team, like cluster-admins or infra, store the ArgoCD deployments in their own repo.</p>\n<p>If we applied our current practice, we’d store our app manifests in this external repo. The problem is that we may not have merge access to this repo, and it wouldn’t really make much sense for people who manage the infrastructure to also handle PR’s that don’t pertain directly to cluster management.</p>\n<h2 id=\"considered-options\" style=\"position:relative;\"><a href=\"#considered-options\" aria-label=\"considered options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Considered Options</h2>\n<ol class=\"pf-c-list\">\n<li>Just have All ArgoCD Manifests in one repo and give Operate-First team members access to infra repo so they can review and merge ArgoCD <code class=\"language-text\">Applications</code>.</li>\n<li>Have separate teams handle Applications for their Projects in their own Repos, in this way tracking Applications is not a concern for Infra/Operate-first, but rather the individual team belonging to an ArgoCD project</li>\n<li>Have a separate Repo that Operate-First manages, and have a an ArgoCD App of Apps that manages this repo.</li>\n</ol>\n<h2 id=\"decision-outcome\" style=\"position:relative;\"><a href=\"#decision-outcome\" aria-label=\"decision outcome permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decision Outcome</h2>\n<p>Chosen Option <code class=\"language-text\">(3)</code>. Problems with <code class=\"language-text\">(1)</code> have been outlined above. The issues with <code class=\"language-text\">(3)</code> is that there is no way to effectively enforce teams to ensure their App Projects belong to their team’s project (this is further described below).</p>\n<p>The Proposed Solution is captured by this diagram:</p>\n<p><img src=\"https://user-images.githubusercontent.com/10904967/99705533-d8aac380-2a67-11eb-88e9-b63582271994.png\" alt=\"image\"></p>\n<p>The idea here is that all our operate-first/team-1/team-2/…/team-n ArgoCD <code class=\"language-text\">Applications</code> would go in the <code class=\"language-text\">opf-argocd-apps</code> repo. Then we’d have an App of Apps i.e. the <code class=\"language-text\">OPF Parent App</code> that manages all these apps. This way we can add new applications declaratively to ArgoCD without having to make PR’s to the <code class=\"language-text\">Infra Repo</code> (e.g. <code class=\"language-text\">moc-cnv-sandbox</code>). Operate-first admins would manage the <code class=\"language-text\">opf-argocd-apps</code> repo. Any other ArgoCD <code class=\"language-text\">Applications</code> that manage cluster resources like <code class=\"language-text\">clusterrolebindings</code> or operator <code class=\"language-text\">subscriptions</code> etc. can remain in the infra repo since that’s a concern for cluster admins. We would direct any <em>user</em> that wants to use ArgoCD to manage their apps to add their ArgoCD <code class=\"language-text\">Applications</code> to the <code class=\"language-text\">opf-argocd-apps</code> repo.</p>\n<h3 id=\"positive-consequences\" style=\"position:relative;\"><a href=\"#positive-consequences\" aria-label=\"positive consequences permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Positive Consequences</h3>\n<ul class=\"pf-c-list\">\n<li>Infrastructure/cluster-admins are not bombarded with PR’s for ArgoCD App onboarding</li>\n<li>OperateFirst maintainers can handle the PR’s unhindered</li>\n<li>The <code class=\"language-text\">opf-argocd-apps</code> repo can be leveraged by CRC/Quicklab/Other OCP Clusters to quickly setup ArgoCD ODH/Thoth/etc. Applications.</li>\n</ul>\n<h3 id=\"negative-consequences\" style=\"position:relative;\"><a href=\"#negative-consequences\" aria-label=\"negative consequences permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Negative Consequences</h3>\n<p>Biggest concern here is that there is no way to automatically enforce that Applications in <code class=\"language-text\">opf-argocd-apps</code> repo <em>belong</em> to the <code class=\"language-text\">Operate First</code> ArgoCD project (see diagram).</p>\n<p><em>Why is this a problem?</em> Because we use ArgoCD projects to restrict what types of resources applications <em>in that project</em> can deploy. For example ArgoCD apps in the <code class=\"language-text\">Infra Apps</code> project in the diagram can deploy: <code class=\"language-text\">clusterrolebinding</code>, <code class=\"language-text\">operators</code>, etc. So while <code class=\"language-text\">OPF Parent App</code> cannot deploy <code class=\"language-text\">clusterrolebindings</code> because it belongs to the <code class=\"language-text\">Operate First</code> ArgoCD project, it could deploy another ArgoCD application that belongs to <code class=\"language-text\">Infra apps</code> and <em>that ArgoCD app</em> could deploy clusterrolebindings.</p>\n<p>You can read more about this <a href=\"https://github.com/argoproj/argo-cd/issues/3045\">issue here</a>. The individual there used admission hooks to get around this but I don’t think we want to go there just yet. My suggestion is we begin by enforcing this at the PR level, and transition to maybe catching this in CI until there’s a proper solution upstream.</p>","fields":{"srcLink":"https://github.com/operate-first/blueprint/blob/master/docs/adr/0004-argocd-apps-of-apps-structure.md"},"frontmatter":{"title":"","description":null}}},"pageContext":{"id":"b0f80b03-0839-527a-8f55-8d0b014d7ad8"}},"staticQueryHashes":["117426894","3000541721"]}