{"componentChunkName":"component---src-templates-markdown-js","path":"/blueprints/blueprint/docs/adr/0005-support-multi-environments-in-repos.md","result":{"data":{"site":{"siteMetadata":{"title":"Operate First"}},"markdownRemark":{"id":"1675136e-7af8-5cdc-8b0d-98bb8e5a0a22","html":"<h1 id=\"repositories-supporting-multiple-environment-deployments\" style=\"position:relative;\"><a href=\"#repositories-supporting-multiple-environment-deployments\" aria-label=\"repositories supporting multiple environment deployments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Repositories Supporting Multiple Environment Deployments</h1>\n<h2 id=\"context-and-problem-statement\" style=\"position:relative;\"><a href=\"#context-and-problem-statement\" aria-label=\"context and problem statement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Context and Problem Statement</h2>\n<p>With the introduction of the <a href=\"0004-argocd-apps-of-apps-structure.md\">app of apps</a> ADR we now have a way to separate application\nmanagement with infrastructure management. The <a href=\"https://github.com/operate-first/argocd-apps\">argocd-apps</a> repo now serves\nas a central point of managing ArgoCD applications (and in turn our manifests in general) for the operate-first initiative.</p>\n<p>As per the <a href=\"0004-argocd-apps-of-apps-structure.md\">App of Apps ADR doc</a> we would like both the <code class=\"language-text\">argocd-apps</code> repo and\nthe repos that each application in the <code class=\"language-text\">argocd-apps</code> target to be able to be deployed in multiple environments. Environments\nhere can mean multiple namespaces on the same cluster, or different clusters all together.</p>\n<p>For example, I should be able to create a single <code class=\"language-text\">ArgoCD</code> app, that points to the <code class=\"language-text\">argocd-apps</code> repo and have it create\nall the ArgoCD applications that live in this repo, regardless of environment. This is fine if your manifest\nrepo only has one set of manifest deployment that can be deployed in any environment without needing additional tuning.\nThis is rarely the case however, and often times you’ll have a <code class=\"language-text\">common</code> set of manifests, and then your target environments\nwill add additional configurations on top of this. This results in multiple subdirectories with different <code class=\"language-text\">paths</code> for\neach target environment. This essentially means we can only use <code class=\"language-text\">argocd-apps</code> repo for a specific environment only.</p>\n<h2 id=\"considered-options\" style=\"position:relative;\"><a href=\"#considered-options\" aria-label=\"considered options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Considered Options</h2>\n<ol class=\"pf-c-list\">\n<li>Keep argocd-apps repo environment specific, and use multiple repos as “app-of-apps” repos for each environment</li>\n<li>Use Kustomize overlays/bases for argocd-apps repo and have different overlays that patch the <code class=\"language-text\">path</code> for each environment</li>\n</ol>\n<h2 id=\"decision-outcome\" style=\"position:relative;\"><a href=\"#decision-outcome\" aria-label=\"decision outcome permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decision Outcome</h2>\n<p>Choose 2) as it accomplishes much of 1) without needing yet more repos and adding bloat to the organization.</p>\n<p>The <code class=\"language-text\">argocd-apps</code> repo would follow the following structure:</p>\n<p>The example makes these assumptions:</p>\n<ul class=\"pf-c-list\">\n<li>There are 2 target environments: <code class=\"language-text\">environment_1</code> and <code class=\"language-text\">environment_2</code></li>\n<li>There are 2 projects (corresponding to teams) <code class=\"language-text\">project_1</code> and <code class=\"language-text\">project_2</code></li>\n<li>Each project has a number of different ArgoCD applications, labelled <code class=\"language-text\">app_#.yaml</code>, note that <code class=\"language-text\">project_1/app_1.yaml</code> does not need to be the same as <code class=\"language-text\">project_2/app_1.yaml</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── base\n│   ├── project_1\n│   │   ├── app_1.yaml\n│   │   └── app_2.yaml\n│   └── project_2\n│       ├── app_1.yaml\n│       └── app_2.yaml\n└── overlays\n    ├── environment_1\n    │   ├── project_1\n    │   │   └── patch_app_2.yaml\n    │   └── project_2\n    │       ├── app_3.yaml\n    │       └── patch_app_1.yaml\n    │       └── patch_app_2.yaml\n    └── environment_2\n        ├── project_1\n        │   └── patch_app_1.yaml\n        └── project_2\n            └── .</code></pre></div>\n<p>In this sort of a structuring, we can now accommodate various different use cases. The <code class=\"language-text\">overlays</code> folder allows you to update\nthe <code class=\"language-text\">path</code> structure (or anything really) so that it points a different path in a target repository. This is useful if your\ntarget repository follows this sort of a structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├──base\n├──overlays\n│   ├── environment_1\n│   └── environment_2</code></pre></div>\n<p>You could also include an ArgoCD application that <em>only</em> deploys to a single environment.</p>\n<p>With this method any ArgoCD instance can create their own Application and point to either <code class=\"language-text\">environment_1</code> or\n<code class=\"language-text\">environment_2</code> overlay and deploy all the ArgoCD applications (and in turn the manifests they point to).</p>\n<p>The following explains the example structure and what it’s doing in more detail:\nNote that all applications in <code class=\"language-text\">base</code> are auto included in <code class=\"language-text\">overlays</code>.</p>\n<p>On <code class=\"language-text\">environment_1</code></p>\n<ul class=\"pf-c-list\">\n<li><code class=\"language-text\">project_1</code> auto picks up <code class=\"language-text\">app_1.yaml</code> in <code class=\"language-text\">base</code> but updates <code class=\"language-text\">app_2.yaml</code> to point to a different path.</li>\n<li><code class=\"language-text\">project_2</code> updates both <code class=\"language-text\">app_1.yaml</code> and <code class=\"language-text\">app_2.yaml</code> but also includes <code class=\"language-text\">app_3.yaml</code> because it only wants to deploy\n<code class=\"language-text\">app_3</code> in <code class=\"language-text\">environment_1</code>, if <code class=\"language-text\">project_2</code> includes <code class=\"language-text\">app_3</code> in <code class=\"language-text\">base</code> then it would be automatically picked up by <code class=\"language-text\">environment_2</code>.</li>\n</ul>\n<p>On <code class=\"language-text\">environment_2</code></p>\n<ul class=\"pf-c-list\">\n<li><code class=\"language-text\">project_1</code> auto picks up <code class=\"language-text\">app_2.yaml</code> in <code class=\"language-text\">base</code> but updates <code class=\"language-text\">app_1.yaml</code> to point to a different path.</li>\n<li><code class=\"language-text\">project_2</code> deploys the <code class=\"language-text\">base</code> apps in this environment without any changes.</li>\n</ul>\n<h3 id=\"positive-consequences\" style=\"position:relative;\"><a href=\"#positive-consequences\" aria-label=\"positive consequences permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Positive Consequences</h3>\n<ul class=\"pf-c-list\">\n<li>Lots of flexibility in tuning configurations for target environments and accommodating different usecases</li>\n</ul>\n<h3 id=\"negative-consequences\" style=\"position:relative;\"><a href=\"#negative-consequences\" aria-label=\"negative consequences permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Negative Consequences</h3>\n<ul class=\"pf-c-list\">\n<li>Potentially added complexity in onboarding apps</li>\n</ul>","fields":{"srcLink":"https://github.com/operate-first/blueprint/blob/master/docs/adr/0005-support-multi-environments-in-repos.md"},"frontmatter":{"title":"","description":null}}},"pageContext":{"id":"1675136e-7af8-5cdc-8b0d-98bb8e5a0a22"}},"staticQueryHashes":["117426894","3000541721"]}