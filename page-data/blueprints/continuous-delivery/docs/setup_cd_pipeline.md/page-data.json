{"componentChunkName":"component---src-templates-markdown-js","path":"/blueprints/continuous-delivery/docs/setup_cd_pipeline.md","result":{"data":{"site":{"siteMetadata":{"title":"Operate First"}},"markdownRemark":{"id":"e110b080-930a-5051-97f9-6ac6b1d6a0e4","html":"<h1 id=\"setting-up-a-continuous-delivery-pipeline\" style=\"position:relative;\"><a href=\"#setting-up-a-continuous-delivery-pipeline\" aria-label=\"setting up a continuous delivery pipeline permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up a Continuous Delivery Pipeline</h1>\n<p>This chapter describes how to set up a continuous delivery pipeline using Tekton/OpenShift Pipelines.</p>\n<h2 id=\"setting-aicoe-ci-on-github-organizationrepository\" style=\"position:relative;\"><a href=\"#setting-aicoe-ci-on-github-organizationrepository\" aria-label=\"setting aicoe ci on github organizationrepository permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting AICoE-CI on GitHub Organization/Repository</h2>\n<p>Setting up AICoE-CI on to your Github Organization/Repository can be commenced with three simple steps process:</p>\n<ul class=\"pf-c-list\">\n<li>AICoE-CI is available as <a href=\"https://github.com/apps/aicoe-ci\">github application</a>.<br />\nInstall and configure the app on your GitHub Organization or Repository.</li>\n<li>Send invite to our friendly cyborg bot as a Contributor: <a href=\"https://github.com/sesheta\">Sesheta</a>.</li>\n<li>Add the aicoe-ci configuration file into your repository/repositories.<br />\nExample configuration file: <a href=\"docs/.aicoe-ci.yaml\">.aicoe-ci.yaml</a><br />\nMore Detailed Explanation on aicoe-ci configuration file: <a href=\"#aicoe-ci-configuration-file\">aicoe-ci configuration file</a></li>\n</ul>\n<p><strong>NOTE</strong>: Interested in Other Thoth-bots, AICoE-CI works very well with other bots. More information on Setup of other Thoth Bots: <a href=\"docs/thoth-bots-setup.md\">Thoth Bots Setup</a></p>\n<h2 id=\"aicoe-ci-configuration-file\" style=\"position:relative;\"><a href=\"#aicoe-ci-configuration-file\" aria-label=\"aicoe ci configuration file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AICoE-CI configuration file</h2>\n<p>The AICoE-CI configuration file is to be added to the root of the repository directory and to be named: <code class=\"language-text\">.aicoe-ci.yaml</code><br />\nIt allows the user to configure checks, release modules to pypi, build preferences and update imagestream in kustomize yaml file.</p>\n<h3 id=\"configuring-checks-and-tests\" style=\"position:relative;\"><a href=\"#configuring-checks-and-tests\" aria-label=\"configuring checks and tests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring checks and tests</h3>\n<p>CI provides following checks for pull requests. Each check is independent of each other, so users can pick and choose the tests which they require for there repository. It can be added into the <code class=\"language-text\">.aicoe.yaml</code> configuration file, as shown in the example snippet below.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">check</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> thoth<span class=\"token punctuation\">-</span>pytest\n  <span class=\"token punctuation\">-</span> thoth<span class=\"token punctuation\">-</span>pytest<span class=\"token punctuation\">-</span>py38\n  <span class=\"token punctuation\">-</span> thoth<span class=\"token punctuation\">-</span>precommit\n  <span class=\"token punctuation\">-</span> thoth<span class=\"token punctuation\">-</span>precommit<span class=\"token punctuation\">-</span>py38\n  <span class=\"token punctuation\">-</span> thoth<span class=\"token punctuation\">-</span>build\n  <span class=\"token punctuation\">-</span> thoth<span class=\"token punctuation\">-</span>custom<span class=\"token punctuation\">-</span>build</code></pre></div>\n<p>More information on available checks/tests:</p>\n<ul class=\"pf-c-list\">\n<li><code class=\"language-text\">thoth-pytest</code>: executes python-3.6 pytest.</li>\n<li><code class=\"language-text\">thoth-pytest-py38</code>: executes python-3.8 pytest.</li>\n<li><code class=\"language-text\">thoth-precommit</code>: execute <a href=\"https://pre-commit.com/\">pre-commit</a> checks based on <a href=\".pre-commit-config.yaml\">pre-commit-config.yaml</a>.</li>\n<li><code class=\"language-text\">thoth-precommit-py38</code>: execute <a href=\"https://pre-commit.com/\">pre-commit</a> checks based on <a href=\".pre-commit-config.yaml\">pre-commit-config.yaml</a> available for python-3.8.</li>\n<li><code class=\"language-text\">thoth-build</code>: execute container image build check. more information on configuring image build requirements: <a href=\"#configuring-build-requirements\">here</a>.</li>\n<li><code class=\"language-text\">thoth-custom-build</code>: execute custom pipeline available in the users repository.</li>\n</ul>\n<p>If users require more custom checks/tests, please open a feature request issue with detailed explanation of the tests requirement.</p>\n<h3 id=\"configuring-build-requirements\" style=\"position:relative;\"><a href=\"#configuring-build-requirements\" aria-label=\"configuring build requirements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring Build requirements</h3>\n<p>Configuration files allows user assign details about the build requirements and specify base image and registry details for build and push.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build-stratergy</span><span class=\"token punctuation\">:</span> Dockerfile <span class=\"token comment\"># Allowed values: Source, Dockerfile, Containerfile (default: Source)</span>\n  <span class=\"token key atrule\">base-image</span><span class=\"token punctuation\">:</span> registry.access.redhat.com/ubi8/ubi<span class=\"token punctuation\">:</span>latest\n  <span class=\"token key atrule\">dockerfile-path</span><span class=\"token punctuation\">:</span> Dockerfile\n  <span class=\"token key atrule\">registry</span><span class=\"token punctuation\">:</span> quay.io <span class=\"token comment\"># Imgage registry to be used. (default: quay.io)</span>\n  <span class=\"token key atrule\">registry-org</span><span class=\"token punctuation\">:</span> thoth<span class=\"token punctuation\">-</span>station <span class=\"token comment\"># Organization to be used in Image Registry. (default: thoth-station)</span>\n  <span class=\"token key atrule\">registry-project</span><span class=\"token punctuation\">:</span> example <span class=\"token comment\"># Project Repository in Image Registry to be used to push image.</span>\n  <span class=\"token key atrule\">registry-secret</span><span class=\"token punctuation\">:</span> thoth<span class=\"token punctuation\">-</span>station<span class=\"token punctuation\">-</span>thoth<span class=\"token punctuation\">-</span>pusher<span class=\"token punctuation\">-</span>secret <span class=\"token comment\"># pre-exists in ci</span></code></pre></div>\n<ul class=\"pf-c-list\">\n<li><code class=\"language-text\">registry-secret</code> are to be pre setup and would be available for AICoE in running aicoe-ci instance.</li>\n</ul>\n<table class=\"pf-c-table\">\n<thead>\n<tr>\n<th>Quay Organization</th>\n<th>Secret value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AICoE</td>\n<td>aicoe-pusher-secret</td>\n</tr>\n<tr>\n<td>Thoth-Station</td>\n<td>thoth-station-thoth-pusher-secret</td>\n</tr>\n<tr>\n<td>OpenDataHub</td>\n<td>opendatahub-thoth-pusher-secret</td>\n</tr>\n<tr>\n<td>ODH-Jupyterhub</td>\n<td>odh-jupyterhub-thoth-pusher-secret</td>\n</tr>\n</tbody>\n</table>\n<p>It is the responsibility of the Users/Developer to setup a robot or a serviceaccount in the image registry and pass on the kubernetes secret containing <code class=\"language-text\">.dockerconfigjson</code> secret. On the quay repository, the robot can be setup and the kubernetes secret of the robot can be passed to the aicoe-ci instance. This secret would be setup in the instance and would be available for the users to specific as a registry-secret. Steps to setup robot in quay and configure it to the quay repository:</p>\n<ul class=\"pf-c-list\">\n<li>First, we need to create a robot in the Organization (also possible to setup in individual account).<br />\nAdding a robot account<br />\nClick on Create Robot Account and enter a name for the account. The username will become namespace+accountname where namespace is the name of the user or Organization.<br />\n<img src=\"/docs/quay-robots.png\" alt=\"quay-robot\"></li>\n<li>Click on the Robot creation, goto kubernetes secret and pass on that information to aicoe-ci instance. Currently you would have to pass it on by contacting us, we are still trying to figure out some alternative.</li>\n<li>Once the secret is passed we could get that secret to the aicoe-ci instance, then it would be ready to be used as <code class=\"language-text\">registry-secret</code>.</li>\n</ul>\n<p><strong>NOTE</strong>: Developer has to provide that robot <strong>write</strong> access to the repository, they wish to build and push container image.</p>\n<h3 id=\"configuring-deploy-requirements\" style=\"position:relative;\"><a href=\"#configuring-deploy-requirements\" aria-label=\"configuring deploy requirements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring Deploy requirements</h3>\n<p>AICoE-CI enable users to utilize the GitOps power and update manifest files with relevant information from the builds.<br />\nUser can point the context path and repository of the imagestream manifest, that has to be updated with the newly built available image tag.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">project-org</span><span class=\"token punctuation\">:</span> thoth<span class=\"token punctuation\">-</span>station <span class=\"token comment\"># Organization on Github contianing the Repository..</span>\n  <span class=\"token key atrule\">project-name</span><span class=\"token punctuation\">:</span> thoth<span class=\"token punctuation\">-</span>application <span class=\"token comment\"># Repository on Github containing the kustomize manifests.</span>\n  <span class=\"token key atrule\">overlay-contextpath</span><span class=\"token punctuation\">:</span> example/overlays/test/imagestreamtag.yaml <span class=\"token comment\"># Imagestream manifest where tag is to be updated.</span></code></pre></div>\n<p>For More details, Visit: <a href=\"https://github.com/AICoE/aicoe-ci\">https://github.com/AICoE/aicoe-ci</a></p>","fields":{"srcLink":"https://github.com/operate-first/continuous-delivery/blob/master/docs/setup_cd_pipeline.md"},"frontmatter":{"title":"","description":null}}},"pageContext":{"id":"e110b080-930a-5051-97f9-6ac6b1d6a0e4"}},"staticQueryHashes":["117426894","3000541721"]}