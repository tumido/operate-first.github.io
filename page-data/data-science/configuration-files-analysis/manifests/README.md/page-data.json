{"componentChunkName":"component---src-templates-markdown-js","path":"/data-science/configuration-files-analysis/manifests/README.md","result":{"data":{"site":{"siteMetadata":{"title":"Operate First"}},"markdownRemark":{"id":"bc895d9b-e3c6-5acd-bc38-f724213b6e85","html":"<h1 id=\"automated-argo-workflows\" style=\"position:relative;\"><a href=\"#automated-argo-workflows\" aria-label=\"automated argo workflows permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Automated Argo workflows</h1>\n<p>If you’d like to automate your Jupyter notebooks using Argo, please use these kustomize manifests. If you follow the steps bellow, your application is fully set and ready to be deployed via Argo CD.</p>\n<p>For a detailed guide on how to adjust your notebooks etc, please consult <a href=\"https://github.com/aicoe-aiops/data-science-workflows/blob/master/Automating%20via%20Argo.md\">documentation</a></p>\n<ol class=\"pf-c-list\">\n<li>Replace all <code class=\"language-text\">&lt;VARIABLE&gt;</code> mentions with your project name, respective url or any fitting value</li>\n<li>Define your automation run structure in the <code class=\"language-text\">templates</code> section of <a href=\"./cron-workflow.yml\"><code class=\"language-text\">cron-workflow.yaml</code></a></li>\n<li>\n<p>Set up <code class=\"language-text\">sops</code>:</p>\n<ol class=\"pf-c-list\">\n<li>Install <code class=\"language-text\">go</code> from your distribution repository</li>\n<li>Setup <code class=\"language-text\">GOPATH</code></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'export GOPATH=\"<span class=\"token environment constant\">$HOME</span>/.go\"'</span> <span class=\"token operator\">>></span> ~/.bashrc\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'export PATH=\"<span class=\"token variable\">${GOPATH<span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>bin<span class=\"token operator\">:</span>}</span>/bin:<span class=\"token environment constant\">$PATH</span>\"'</span> <span class=\"token operator\">>></span> ~/.bashrc\n<span class=\"token builtin class-name\">source</span>  ~/.bashrc</code></pre></div>\n<ol start=\"3\" class=\"pf-c-list\">\n<li>Install <code class=\"language-text\">sops</code> from your distribution repository if possible or use <a href=\"https://github.com/mozilla/sops#stable-release\">sops GitHub release binaries</a></li>\n<li>Import AICoE-SRE’s public key <a href=\"https://keyserver.ubuntu.com/pks/lookup?op=get&#x26;search=0xefdb9afbd18936d9ab6b2eecbd2c73ff891fbc7e\">EFDB9AFBD18936D9AB6B2EECBD2C73FF891FBC7E</a>:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gpg --keyserver keyserver.ubuntu.com --recv EFDB9AFBD18936D9AB6B2EECBD2C73FF891FBC7E</code></pre></div>\n<ol start=\"5\" class=\"pf-c-list\">\n<li>Import tcoufal’s (<a href=\"https://keyserver.ubuntu.com/pks/lookup?op=get&#x26;search=0xa76372d361282028a99f9a47590b857e0288997c\">A76372D361282028A99F9A47590B857E0288997C</a>) and mhild’s <a href=\"https://keyserver.ubuntu.com/pks/lookup?op=get&#x26;search=0x04dafcd9470a962a2f272984e5eb0da32f3372ac\">04DAFCD9470A962A2F272984E5EB0DA32F3372AC</a> keys (so they can help)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gpg --keyserver keyserver.ubuntu.com --recv A76372D361282028A99F9A47590B857E0288997C  <span class=\"token comment\"># tcoufal</span>\ngpg --keyserver keyserver.ubuntu.com --recv 04DAFCD9470A962A2F272984E5EB0DA32F3372AC  <span class=\"token comment\"># mhild</span></code></pre></div>\n<ol start=\"6\" class=\"pf-c-list\">\n<li>If you’d like to be able to build the manifest on your own as well, please list your GPG key in the <a href=\".sops.yaml\"><code class=\"language-text\">.sops.yaml</code> file</a>, <code class=\"language-text\">pgp</code> section (add to the comma separated list). With your key present there, you can later generate the full manifests using <code class=\"language-text\">kustomize</code> yourself (<code class=\"language-text\">ksops</code> has to be installed, please follow ksops <a href=\"https://github.com/viaduct-ai/kustomize-sops#0-verify-requirements\">guide</a>.</li>\n</ol>\n</li>\n<li>\n<p>Create a secret and encrypt it with <code class=\"language-text\">sops</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># If you're not already in the `manifest` folder, cd here</span>\n<span class=\"token builtin class-name\">cd</span> manifests\n<span class=\"token comment\"># Mind that `SECRET_NAME` must match the `SECRET_NAME` used in `cron-workflow.yaml`</span>\noc create secret generic <span class=\"token operator\">&lt;</span>SECRET_NAME<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n --from-literal<span class=\"token operator\">=</span>path<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>BASE_PATH_WITHIN_CEPH_BUCKET<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n --from-literal<span class=\"token operator\">=</span>bucket<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>BUCKET<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n --from-literal<span class=\"token operator\">=</span>access-key-id<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>AWS_ACCESS_KEY_ID<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n --from-literal<span class=\"token operator\">=</span>secret-access-key<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>AWS_SECRET_ACCESS_KEY<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n --dry-run -o yaml <span class=\"token operator\">|</span>\nsops --input-type<span class=\"token operator\">=</span>yaml --output-type<span class=\"token operator\">=</span>yaml -e /dev/stdin <span class=\"token operator\">></span> ceph-creds.yaml</code></pre></div>\n</li>\n</ol>\n<p>Note: You can use the S2I image, that was built by <a href=\"https://github.com/AICoE/s2i-custom-notebook\">s2i-custom-notebook</a> for this automation. This image is expected to be used by default, therefore the <code class=\"language-text\">workingDir</code> is adjusted to <code class=\"language-text\">/opt/app-root/backup</code>. Please change or remove this settings in case you plan on using different image.</p>","fields":{"srcLink":"https://github.com/aicoe-aiops/configuration-files-analysis/blob/master/manifests/README.md"},"frontmatter":{"title":"","description":null}}},"pageContext":{"id":"bc895d9b-e3c6-5acd-bc38-f724213b6e85"}},"staticQueryHashes":["117426894","3000541721"]}